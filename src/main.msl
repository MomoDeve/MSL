namespace Utils
{	
	public class String
	{
        public static function Split(string, delimiters)
        {
            var result = System.Array();
            var current = "";
            foreach (var c in string)
            {
                if (Find(delimiters, c))
                {
                    if(!current.Empty())
                    {
                        result.Append(current);
                        current = "";
                    }
                }
                else
                {
                    current += c;
                }
            }
            if (!current.Empty())
                result.Append(current);

            return result;
        }

        public static function Find(string, stringToFind)
		{
			for(var i = 0; i < string.Size() - stringToFind.Size() + 1; i += 1)
			{
				var match = true;
				for(var j = 0; j < stringToFind.Size(); j += 1)
				{
					if(string[i + j] != stringToFind[j])
					{
						match = false;
					}
				}
				if(match) return true;
			}
			return false;
		}
		
		public static function Replace(string, symToReplace, replaceSym)
		{
			var result = "";
			for(var i = 0; i < string.Size(); i += 1)
			{
				var sym = string[i];
				if(sym == symToReplace)
					result += replaceSym;
				else
					result += sym;
			}
			return result;
		}
		
		public static function ToArray(string)
		{
			var result = Utils.Array(string.Size())
			for(var i = 0; i < string.Size(); i += 1)
			{
				result[i] = string[i];
			}
			return result;
		}
		
		public static function FromArray(array)
		{
			var result = "";
			foreach(var element in array)
			{
				result += element;
			}
			return result;
		}
	}
	
	public static class Type
	{
		public static function SameAs(object1, object2)
		{
			var R = System.Reflection;
			return R.GetType(object1) == R.GetType(object2);
		}

        public static function GetClass(namespaceName, className)
        {
            var R = System.Reflection;
            return R.GetMember(R.GetNamespace(namespaceName), className);
        }

        public static function Invoke(type, method, args)
        {
            return System.Reflection.Invoke(type, method, args);
        }

        public static function Invoke(type, method)
        {
            return System.Reflection.Invoke(type, method, System.Array(0));
        }

        public static function GetMember(signature)
        {
            var args = Utils.String.Split(signature, ".");
            return GetClass(args[0], args[1]);
        }

        public static function GetMember(parent, child)
        {
            return System.Reflection.GetMember(parent, child);
        }

        public static function Create(namespaceName, className, args)
        {
            return System.Reflection.CreateInstance(GetClass(namespaceName, className), args);
        }

        public static function Create(namespaceName, className)
        {
            return System.Reflection.CreateInstance(GetClass(namespaceName, className), System.Array(0));
        }

        public static function Create(signature)
        {
            var names = Utils.String.Split(signature, ".");
            return Create(names[0], names[1], System.Array(0));
        }

        public static function InvokeStatic(signature)
        {
            var names = Utils.String.Split(signature, ".");
            return Invoke(GetClass(names[0], names[1]), names[2], System.Array(0));
        }

        public static function InvokeStatic(signature, args)
        {
            var names = Utils.String.Split(signature, ".");
            return Invoke(GetClass(names[0], names[1]), names[2], args);
        }
	}

	public class Range
	{	
		private var first;
		private var last;
		private var step;
		
		public function Range(last)
		{
			return Range(0, last, 1);
		}
		
		public function Range(first, last)
		{
			return Range(first, last, 1);
		}
		
		public function Range(first, last, step)
		{
			this.first = first;
			this.last = last;
			this.step = step;
		}
		
		public function Begin()
		{
			return first;
		}
		
		public function End()
		{
			return last;
		}
		
		public function Next(iter)
		{
			iter += step;
			if(iter > last)
				return last;
			else
				return iter;
		}
		
		public function GetByIter(iter)
		{
			return iter;
		}
	}
}

namespace Math
{
	public class Vector2
	{
		public var x;
		public var y;
		
		public function Vector2()
		{
			x = 0;
			y = 0;
		}
		
		public function Vector2(x, y)
		{
			this.x = x;
			this.y = y;
		}
		
		public function ToString()
		{
			return "[" + x + "; " + y + "]";
		}
		
		public function SumOperator(vec)
		{
			return Vector2(x + vec.x, y + vec.y);
		}
		
		public function SubOperator(vec)
		{
			return Vector2(x - vec.x, y - vec.y);
		}

        public function Dot(vec)
        {
            return x * vec.x + y * vec.y;
        }
	}
}

namespace System
{
    public static class Reflection
    {
        private static var dll;

        public static function Reflection()
        {
            dll = "msl_reflection.dll";
            Dll.LoadLibrary(dll);
        }

        public static function GetType(object)
        {
            return Dll.Call(dll, "GetType", object);
        }

        public static function CreateInstance(type, args)
        {
            return Dll.Call(dll, "CreateInstance", type, args);
        }

        public static function Invoke(object, method, args)
        {
            return Dll.Call(dll, "Invoke", object, method, args);
        }

        public static function ContainsMethod(object, method, argCount)
        {
            return Dll.Call(dll, "ContainsMethod", object, method, argCount);
        }

        public static function GetNamespace(name)
        {
            return Dll.Call(dll, "GetNamespace", name);
        }

        public static function GetMember(parent, child)
        {
            return Dll.Call(dll, "GetMember", parent, child);
        }

        public static function IsNamespaceExists(name)
        {
            return Dll.Call(dll, "IsNamespaceExists", name);
        }

        public static function ContainsMember(object, member)
        {
            return Dll.Call(dll, "ContainsMember", object, member);
        }
    }

    public static class GC
    {
        private static var dll;

        public static function GC()
        {
            dll = "msl_gc.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Collect()
        {
            return Dll.Call(dll, "Collect");
        }

        public static function Disable()
        {
            return Dll.Call(dll, "Disable");
        }

        public static function Enable()
        {
            return Dll.Call(dll, "Enable");
        }

        public static function ReleaseMemory()
        {
            return Dll.Call(dll, "ReleaseMemory");
        }

        public static function SetMinimalMemory(value)
        {
            return Dll.Call(dll, "SetMinimalMemory", value);
        }

        public static function SetMaximalMemory(value)
        {
            return Dll.Call(dll, "SetMaximalMemory", value);
        }

        public static function SetLogPermissions(value)
        {
            return Dll.Call(dll, "SetLogPermissions", value);
        }
    }

    public static class Console
    {
        private static var dll;

        public static function Console()
        {
            dll = "msl_console.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Print(object)
        {
            if (Reflection.ContainsMethod(object, "ToString", 0))
                object = object.ToString();
            return Dll.Call(dll, "Print", object);
        }

        public static function PrintLine(object)
        {
            if (Reflection.ContainsMethod(object, "ToString", 0))
                object = object.ToString();
            return Dll.Call(dll, "PrintLine", object);
        }

        public static function Read()
        {
            return Dll.Call(dll, "Read");
        }

        public static function ReadLine()
        {
            return Dll.Call(dll, "ReadLine");
        }

        public static function ReadBool()
        {
            return Dll.Call(dll, "ReadBool");
        }

        public static function ReadFloat()
        {
            return Dll.Call(dll, "ReadFloat");
        }

        public static function ReadInt()
        {
            return Dll.Call(dll, "ReadInt");
        }
    }

    public class Array
    {
        private static var dll;
        private var array;
    
        public static function Array()
        {
            dll = "msl_array.dll"
            Dll.LoadLibrary(dll);
        }        

        public function Array()
        {
            return Array(0);
        }

        public function Array(size)
        {
            return Dll.Call(dll, "ArrayConstructor", size);
        }

        public function Append(object)
        {
            return Dll.Call(dll, "Append", array, object);
        }

        public function GetByIndex(index)
        {
            return Dll.Call(dll, "GetByIndex", array, index);
        }

        public function GetByIter(iterator)
        {
            return GetByIndex(iterator);
        }

        public function Next(iterator)
        {
            return iterator + 1;
        }

        public function Pop()
        {
            return Dll.Call(dll, "Pop", array);
        }

        public function Empty()
        {
            return Size() == 0;
        }

        public function Size()
        {
            return Dll.Call(dll, "Size", array);
        }

        public function ToString()
        {
            return Dll.Call(dll, "ToString", array);
        } 
            
        public function Begin()
        {
            return 0;
        }

        public function End()
        {
            return Size();
        }

        public function Back()
		{
			return GetByIndex(Size() - 1);
		}
		
		public function Front()
		{
			return GetByIndex(0);
		}
		
		public function Cloned()
		{
            var size = Size();
			var result = Array(size);
			for(var i = 0; i < size; i += 1)
			{
				result[i] = array[i];
			}
			return result;
		}
		
		public function Merged(array)
		{
			var result = Cloned();
            var size = Size();
			for(var i = 0; i < size; i += 1)
			{
				result.Append(array[i]);
			}
			return result;
		}
		
		public function Reversed()
		{
            var size = Size();
			var result = Array(size);
			for(var i = 0; i < size; i += 1)
			{
				result[i] = this[size - i - 1];
			}
			return result;
		}
    }

    public static class Math
    {
        private static var dll;

        public static function Math()
        {
            dll = "msl_math.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Sqrt(value)
        {
            return Dll.Call(dll, "FloatSqrt", value);
        }

        public static function Abs(value)
        {
            return Dll.Call(dll, "FloatAbs", value);
        }

        public static function Sin(value)
        {
            return Dll.Call(dll, "FloatSin", value);
        }

        public static function Cos(value)
        {
            return Dll.Call(dll, "FloatCos", value);
        }

        public static function Tan(value)
        {
            return Dll.Call(dll, "FloatTan", value);
        }

        public static function Exp(value)
        {
            return Dll.Call(dll, "FloatExp", value);
        }

        public static function Asin(value)
        {
            return Dll.Call(dll, "FloatAsin", value);
        }

        public static function Acos(value)
        {
            return Dll.Call(dll, "FloatAcos", value);
        }

        public static function Atan(value)
        {
            return Dll.Call(dll, "FloatAtan", value);
        }

        public static function Log10(value)
        {
            return Dll.Call(dll, "FloatLog10", value);
        }

        public static function Log2(value)
        {
            return Dll.Call(dll, "FloatLog2", value);
        }

        public static function Log(value)
        {
            return Dll.Call(dll, "FloatLog", value);
        }
    }
}

namespace Program
{
    using namespace System;
    using namespace Math;

    class ProgramClass
    {
        public static function Main()
        {
            
        }
    }
}