namespace System
{
	public interface Console
	{
		function Print(value);
		function PrintLine(value);
		function Read();
		function ReadLine();
		function ReadInt();
		function ReadFloat();
		function ReadBool();
	}
	
	public interface Reflection
	{
		function GetType(object);
		function CreateInstance(type);
	}
	
	public interface Array
	{
		function Size();
		function Empty();
		function Pop();
		function ToString();
		function Begin();
		function End();
		function GetByIndex(index);
		function Append(object);
		function GetByIter(iter);
		function Next(iter);
	}
}

namespace Utils
{
	public static class Type
	{
		public static function SameAs(object1, object2)
		{
			var R = System.Reflection;
			return R.GetType(object1) == R.GetType(object2);
		}
	}

	public class Range
	{	
		private var first;
		private var last;
		private var step;
		
		public function Range(last)
		{
			return Range(0, last, 1);
		}
		
		public function Range(first, last)
		{
			return Range(first, last, 1);
		}
		
		public function Range(first, last, step)
		{
			this.first = first;
			this.last = last;
			this.step = step;
		}
		
		public function Begin()
		{
			return first;
		}
		
		public function End()
		{
			return last;
		}
		
		public function Next(iter)
		{
			iter += step;
			if(iter > last)
			{
				return last;
			}
			else
			{
				return iter;
			}
		}
		
		public function GetByIter(iter)
		{
			return iter;
		}
	}
}

namespace Program
{
	using namespace System;
	using namespace Utils;
	
	internal class ProgramClass
	{			
		public static function Main()
		{
			var array = Array();
			foreach(var i in Range(1, 11))
			{
				var inner = Array(2);
				inner[0] = i;
				inner[1] = i ** 2;
				array.Append(inner);
			}
			while(!array.Empty())
			{
				Console.PrintLine(array.Pop());
			}
		}
	}
}



















