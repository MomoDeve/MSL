namespace System
{
	public interface Console
	{
		function Print(value);
		function PrintLine(value);
		function Read();
		function ReadLine();
		function ReadInt();
		function ReadFloat();
		function ReadBool();
	}
	
	public interface Reflection
	{
		function GetType(object);
		function CreateInstance(type);
	}
	
	public interface Array
	{
		function Size();
		function Empty();
		function Pop();
		function ToString();
		function Begin();
		function End();
		function GetByIndex(index);
		function Append(object);
		function GetByIter(iter);
		function Next(iter);
	}
}

namespace Utils
{	
	public class String
	{		
		public static function Find(string, stringToFind)
		{
			for(var i = 0; i < string.Size() - stringToFind.Size() + 1; i += 1)
			{
				var match = true;
				for(var j = 0; j < stringToFind.Size(); j += 1)
				{
					if(string[i + j] != stringToFind[j])
					{
						match = false;
					}
				}
				if(match)
				{
					return true;
				}
			}
			return false;
		}
		
		public static function Replace(string, symToReplace, replaceSym)
		{
			var result = "";
			for(var i = 0; i < string.Size(); i += 1)
			{
				var sym = string[i];
				if(sym == symToReplace)
				{
					result += replaceSym;
				}
				else
				{
					result += sym;
				}
			}
			return result;
		}
	}
	
	public static class Type
	{
		public static function SameAs(object1, object2)
		{
			var R = System.Reflection;
			return R.GetType(object1) == R.GetType(object2);
		}
	}

	public class Range
	{	
		private var first;
		private var last;
		private var step;
		
		public function Range(last)
		{
			return Range(0, last, 1);
		}
		
		public function Range(first, last)
		{
			return Range(first, last, 1);
		}
		
		public function Range(first, last, step)
		{
			this.first = first;
			this.last = last;
			this.step = step;
		}
		
		public function Begin()
		{
			return first;
		}
		
		public function End()
		{
			return last;
		}
		
		public function Next(iter)
		{
			iter += step;
			if(iter > last)
			{
				return last;
			}
			else
			{
				return iter;
			}
		}
		
		public function GetByIter(iter)
		{
			return iter;
		}
	}
}

namespace Math
{
	public class Vector2
	{
		public var x;
		public var y;
		
		public function Vector2()
		{
			x = 0;
			y = 0;
		}
		
		public function Vector2(x, y)
		{
			this.x = x;
			this.y = y;
		}
		
		public function ToString()
		{
			return "[" + x + "; " + y + "]";
		}
		
		public function SumOperator(vec)
		{
			return Vector2(x + vec.x, y + vec.y);
		}
		
		public function SubOperator(vec)
		{
			return Vector2(x - vec.x, y - vec.y);
		}
	}
}

namespace Program
{
	using namespace System;
	using namespace Utils;
	
	internal class ProgramClass
	{			
		public static function Fact(n)
		{
			if(n == 0)
			{
				return 1;
			}
			return n * Fact(n - 1);
		}
		
		public static function Tests()
		{
			var array = Array();
			foreach(var i in Range(1, 11))
			{
				var inner = Array(2);
				inner[0] = i;
				inner[1] = i ** 2;
				array.Append(inner);
			}
			while(!array.Empty())
			{
				Console.Print(array.Pop().ToString() + " ");
			}
			
			const var n = 30;
			Console.PrintLine("\nфакториал " + n + ": " + Fact(n));
		}
		
		public static function Main()
		{
			Tests();
		
			var str1 = "hello world!";
			var match = "hello";
			var str2 = Utils.String.Replace(str1, "l", "7");
			if(Utils.String.Find(str1, match))
			{
				Console.PrintLine("string \"" + str1 + "\" contains: \"" + match + "\"");
			}
			if(!Utils.String.Find(str2, match))
			{
				Console.PrintLine("string \"" + str2 + "\" does not contain: \"" + match + "\"");
			}
			return 0;
		}
	}
}



















