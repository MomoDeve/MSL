namespace Utils
{	
	public class Array
	{
		var array;
		
        public function Inner()
        {
            return array;
        }

		public function Size()
		{
			return array.Size();
		}
		
		public function Array()
		{
			array = System.Array();
		}
		
		public function Array(size)
		{
			array = System.Array(size);
		}
		
		public function Append(object)
		{
			array.Append(object);
		}
		
		public function Back()
		{
			return array[array.Size() - 1];
		}
		
		public function Front()
		{
			return array[0];
		}
		
		public function Cloned()
		{
			var result = Array(Size());
			for(var i = 0; i < array.Size(); i += 1)
			{
				result[i] = array[i];
			}
			return result;
		}
		
		public function Merged(array)
		{
			var result = this.Cloned();
			for(var i = 0; i < array.Size(); i += 1)
			{
				result.Append(array[i]);
			}
			return result;
		}
		
		public function Reversed()
		{
			var result = Array(Size());
			for(var i = 0; i < Size(); i += 1)
			{
				result[i] = this[Size() - i - 1];
			}
			return result;
		}
		
		public function Empty()
		{
			return array.Empty();
		}
		
		public function Pop()
		{
			return array.Pop();
		}
		
		public function Begin()
		{
			return array.Begin();
		}
		
		public function End()
		{
			return array.End();
		}
		
		public function GetByIter(iter)
		{
			return array.GetByIter(iter);
		}
		
		public function Next(iter)
		{
			return array.Next(iter);
		}
		
		public function ToString()
		{
			return array.ToString();
		}
		
		public function GetByIndex(index)
		{
			return array[index];
		}
	}

	public class String
	{
        public static function Split(string, delimiters)
        {
            var result = System.Array();
            var current = "";
            foreach (var c in string)
            {
                if (Find(delimiters, c))
                {
                    if(!current.Empty())
                    {
                        result.Append(current);
                        current = "";
                    }
                }
                else
                {
                    current += c;
                }
            }
            if (!current.Empty())
                result.Append(current);

            return result;
        }

        public static function Find(string, stringToFind)
		{
			for(var i = 0; i < string.Size() - stringToFind.Size() + 1; i += 1)
			{
				var match = true;
				for(var j = 0; j < stringToFind.Size(); j += 1)
				{
					if(string[i + j] != stringToFind[j])
					{
						match = false;
					}
				}
				if(match) return true;
			}
			return false;
		}
		
		public static function Replace(string, symToReplace, replaceSym)
		{
			var result = "";
			for(var i = 0; i < string.Size(); i += 1)
			{
				var sym = string[i];
				if(sym == symToReplace)
					result += replaceSym;
				else
					result += sym;
			}
			return result;
		}
		
		public static function ToArray(string)
		{
			var result = Utils.Array(string.Size())
			for(var i = 0; i < string.Size(); i += 1)
			{
				result[i] = string[i];
			}
			return result;
		}
		
		public static function FromArray(array)
		{
			var result = "";
			foreach(var element in array)
			{
				result += element;
			}
			return result;
		}
	}
	
	public static class Type
	{
		public static function SameAs(object1, object2)
		{
			var R = System.Reflection;
			return R.GetType(object1) == R.GetType(object2);
		}

        public static function GetClass(namespaceName, className)
        {
            var R = System.Reflection;
            return R.GetMember(R.GetNamespace(namespaceName), className);
        }

        public static function Invoke(type, method, args)
        {
            return System.Reflection.Invoke(type, method, args);
        }

        public static function Invoke(type, method)
        {
            return System.Reflection.Invoke(type, method, System.Array(0));
        }

        public static function GetMember(signature)
        {
            var args = Utils.String.Split(signature, ".");
            return GetClass(args[0], args[1]);
        }

        public static function GetMember(parent, child)
        {
            return System.Reflection.GetMember(parent, child);
        }

        public static function Create(namespaceName, className, args)
        {
            return System.Reflection.CreateInstance(GetClass(namespaceName, className), args);
        }

        public static function Create(namespaceName, className)
        {
            return System.Reflection.CreateInstance(GetClass(namespaceName, className), System.Array(0));
        }

        public static function Create(signature)
        {
            var names = Utils.String.Split(signature, ".");
            return Create(names[0], names[1], System.Array(0));
        }

        public static function InvokeStatic(signature)
        {
            var names = Utils.String.Split(signature, ".");
            return Invoke(GetClass(names[0], names[1]), names[2], System.Array(0));
        }

        public static function InvokeStatic(signature, args)
        {
            var names = Utils.String.Split(signature, ".");
            return Invoke(GetClass(names[0], names[1]), names[2], args);
        }
	}

	public class Range
	{	
		private var first;
		private var last;
		private var step;
		
		public function Range(last)
		{
			return Range(0, last, 1);
		}
		
		public function Range(first, last)
		{
			return Range(first, last, 1);
		}
		
		public function Range(first, last, step)
		{
			this.first = first;
			this.last = last;
			this.step = step;
		}
		
		public function Begin()
		{
			return first;
		}
		
		public function End()
		{
			return last;
		}
		
		public function Next(iter)
		{
			iter += step;
			if(iter > last)
				return last;
			else
				return iter;
		}
		
		public function GetByIter(iter)
		{
			return iter;
		}
	}
}

namespace Math
{
	public class Vector2
	{
		public var x;
		public var y;
		
		public function Vector2()
		{
			x = 0;
			y = 0;
		}
		
		public function Vector2(x, y)
		{
			this.x = x;
			this.y = y;
		}
		
		public function ToString()
		{
			return "[" + x + "; " + y + "]";
		}
		
		public function SumOperator(vec)
		{
			return Vector2(x + vec.x, y + vec.y);
		}
		
		public function SubOperator(vec)
		{
			return Vector2(x - vec.x, y - vec.y);
		}
	}
}

namespace Program
{
    using namespace System;

    class ProgramClass
    {
        public static function Main()
        {
            
            return 0;
		}
	}
}
/*
namespace Program
{
	class ProgramClass
	{
		static function Main()
		{
			a * b + c;
			a * b + c * d;
			a * b ** c * d + e * f;
			v1.x * v2.x + v1.y * v2.y;
		}
	}
}*/