namespace System
{
	public interface Console
	{
		function Print(value);
		function PrintLine(value);
		function Read();
		function ReadLine();
		function ReadInt();
		function ReadFloat();
		function ReadBool();
	}
	
	public interface Reflection
	{
		function GetType(object);
		function CreateInstance(type);
	}
}

namespace Utils
{
	public class Range
	{	
		private var iter;
		private var last;
		private var step;
		
		public function Range(last)
		{
			return Range(0, last, 1);
		}
		
		public function Range(first, last)
		{
			return Range(first, last, 1);
		}
		
		public function Range(first, last, step)
		{
			this.iter = first;
			this.last = last;
			this.step = step;
		}
		
		public function Begin()
		{
			return iter;
		}
		
		public function End()
		{
			if(iter < last)
			{
				return last;
			}
			else
			{
				return iter;
			}
		}
		
		public function Next()
		{
			this.iter += step;
			return iter;
		}
	}
}

namespace Program
{
	using namespace System;
	using namespace Utils;
	
	internal class ProgramClass
	{			
		public static function RecFact(n)
		{
			if(n == 0)
			{
				return 1;
			}
			return n * RecFact(n - 1);
		}
	
		public static function Fact(n)
		{
			var res = 1;
			while(n > 0)
			{
				res *= n;
				n -= 1;
			}
			return res;
		}

		public static function Main()
		{	
			
		}
		
							/*
			var arraySize = 10;
			var A = Array[arraySize];
			A.Fill(Utilities.Random(0, 10));
			System.Console.Print(A);
			BubbleSort(A, A.predicate);
			Console.Print(A, stdout);*/

	/*	public static function BubbleSort(A, predicate)
		{
			for( i = 0; i < A.size(); i += 1)
			{
				for(var j = i; j < A.size(); j += 1)
				{
					if(predicate(A[j], A[i]))
					{
						Swap(A[i], A[j]); 
					}
				}
			}
		}

		public static function Swap(left, right)
		{
			var tmp = left;
			left = right;
			right = tmp;
		}*/
	}
}