/*namespace System
{
	public interface Console
	{
		function Print(value);
		function PrintLine(value);
		function Read();
		function ReadLine();
		function ReadInt();
		function ReadFloat();
		function ReadBool();
	}
	
	public interface Reflection
	{
		function GetType(object);
		function CreateInstance(type);
	}
	
	public interface Array
	{
		function Size();
		function Empty();
		function Pop();
		function ToString();
		function Begin();
		function End();
		function GetByIndex(index);
		function Append(object);
		function GetByIter(iter);
		function Next(iter);
	}
	
	public interface GC
	{
		function Collect();
		function Disable();
		function Enable();
		function SetMinimalMemory(value);
		function SetMaximalMemory(value);
		function SetLogPermission(value);
	}
}*/

namespace Utils
{	
	public class Array
	{
		var array;
		
		public function Size()
		{
			return array.Size();
		}
		
		public function Array()
		{
			array = System.Array();
		}
		
		public function Array(size)
		{
			array = System.Array(size);
		}
		
		public function Append(object)
		{
			array.Append(object);
		}
		
		public function Back()
		{
			return array[array.Size() - 1];
		}
		
		public function Front()
		{
			return array[0];
		}
		
		public function Cloned()
		{
			var result = Array(Size());
			for(var i = 0; i < array.Size(); i += 1)
			{
				result[i] = array[i];
			}
			return result;
		}
		
		public function Merged(array)
		{
			var result = this.Cloned();
			for(var i = 0; i < array.Size(); i += 1)
			{
				result.Append(array[i]);
			}
			return result;
		}
		
		public function Reversed()
		{
			var result = Array(Size());
			for(var i = 0; i < Size(); i += 1)
			{
				result[i] = this[Size() - i - 1];
			}
			return result;
		}
		
		public function Empty()
		{
			return array.Empty();
		}
		
		public function Pop()
		{
			return array.Pop();
		}
		
		public function Begin()
		{
			return array.Begin();
		}
		
		public function End()
		{
			return array.End();
		}
		
		public function GetByIter(iter)
		{
			return array.GetByIter(iter);
		}
		
		public function Next(iter)
		{
			return array.Next(iter);
		}
		
		public function ToString()
		{
			return array.ToString();
		}
		
		public function GetByIndex(index)
		{
			return array[index];
		}
	}

	public class String
	{		
		public static function Find(string, stringToFind)
		{
			for(var i = 0; i < string.Size() - stringToFind.Size() + 1; i += 1)
			{
				var match = true;
				for(var j = 0; j < stringToFind.Size(); j += 1)
				{
					if(string[i + j] != stringToFind[j])
					{
						match = false;
					}
				}
				if(match) return true;
			}
			return false;
		}
		
		public static function Replace(string, symToReplace, replaceSym)
		{
			var result = "";
			for(var i = 0; i < string.Size(); i += 1)
			{
				var sym = string[i];
				if(sym == symToReplace)
					result += replaceSym;
				else
					result += sym;
			}
			return result;
		}
		
		public static function ToArray(string)
		{
			var result = Utils.Array(string.Size())
			for(var i = 0; i < string.Size(); i += 1)
			{
				result[i] = string[i];
			}
			return result;
		}
		
		public static function FromArray(array)
		{
			var result = "";
			foreach(var element in array)
			{
				result += element;
			}
			return result;
		}
	}
	
	public static class Type
	{
		public static function SameAs(object1, object2)
		{
			var R = System.Reflection;
			return R.GetType(object1) == R.GetType(object2);
		}
	}

	public class Range
	{	
		private var first;
		private var last;
		private var step;
		
		public function Range(last)
		{
			return Range(0, last, 1);
		}
		
		public function Range(first, last)
		{
			return Range(first, last, 1);
		}
		
		public function Range(first, last, step)
		{
			this.first = first;
			this.last = last;
			this.step = step;
		}
		
		public function Begin()
		{
			return first;
		}
		
		public function End()
		{
			return last;
		}
		
		public function Next(iter)
		{
			iter += step;
			if(iter > last)
				return last;
			else
				return iter;
		}
		
		public function GetByIter(iter)
		{
			return iter;
		}
	}
}

namespace Math
{
	public class Vector2
	{
		public var x;
		public var y;
		
		public function Vector2()
		{
			x = 0;
			y = 0;
		}
		
		public function Vector2(x, y)
		{
			this.x = x;
			this.y = y;
		}
		
		public function ToString()
		{
			return "[" + x + "; " + y + "]";
		}
		
		public function SumOperator(vec)
		{
			return Vector2(x + vec.x, y + vec.y);
		}
		
		public function SubOperator(vec)
		{
			return Vector2(x - vec.x, y - vec.y);
		}
	}
}

namespace Program
{
	using namespace System;
	using namespace Utils;
	using namespace Math;
	
	internal class ProgramClass
	{			
		public static function Fact(n)
		{
			if(n == 0)
				return 1;
			else
				return n * Fact(n - 1);
		}
		
		public static function ArrayTest()
		{
			var array = Utils.Array();
			array.Append(0);
			array.Append(1);
			foreach(var i in Range(2, 10))
			{
				array.Append(array[array.Size() - 1] + array[array.Size() - 2]);
			}
			
			array = array.Reversed();
			Console.PrintLine("array of fibs from end: " + array);
			Console.Print("array of fibs reversed: ");
			
			while(!array.Empty())
			{
				Console.Print(array.Pop()).Print(" ");
			}
			
			const var n = 30;
			Console.PrintLine("\nфакториал " + n + ": " + Fact(n));
			
			Console.PrintLine("Filling array with even integers...");
			foreach(var i in Range(0, 11, 2))
			{
				array.Append(i);
			}
				
			Console.PrintLine(array);
			Console.PrintLine("Merging array with itself...");
			Console.PrintLine(array.Merged(array));
		}
		
		public static function Main()
		{		
			var str1 = "hello world!";
			var match = "hello";
			Console.PrintLine("\nreplacing symbols in \"" + str1 + "\":");
			var str2 = Utils.String.Replace(str1, "l", "7");
			Console.PrintLine("\"" + str1 + "\" -> \"" + str2 + "\"");
			if(Utils.String.Find(str1, match))
			{
				Console.PrintLine("string \"" + str1 + "\" contains: \"" + match + "\"");
			}
			if(!Utils.String.Find(str2, match))
			{
				Console.PrintLine("string \"" + str2 + "\" does not contain: \"" + match + "\"");
			}
			
			Console.PrintLine("\nreplacing last symbol of \"" + str1 + "\" with '?' using array:");
			var stringArray = Utils.String.ToArray(str1);
			stringArray[stringArray.Size() - 1] = "?";
			Console.PrintLine(stringArray);
			var str3 = Utils.String.FromArray(stringArray);
			Console.PrintLine(str3);
			
			Console.PrintLine("\nIterating over \"" + str2 + "\":");
			foreach(var s in str2)
			{
				Console.Print(s + " ");
			}
			return 0;
		}
	}
}