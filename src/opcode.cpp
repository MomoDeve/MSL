#include "opcode.h"
#include "stringExtensions.h"

namespace MSL
{
	namespace VM
	{
		std::string ToString(OPCODE op)
		{
			#define CASE_RETURN(op) case op: return STRING(op);
			switch (op)
			{
			CASE_RETURN(ERROR_SYMBOL);				
			CASE_RETURN(ASSEMBLY_BEGIN_DECL);				
			CASE_RETURN(ASSEMBLY_END_DECL);				
			CASE_RETURN(NAMESPACE_POOL_DECL_SIZE);				
			CASE_RETURN(CLASS_POOL_DECL_SIZE);				
			CASE_RETURN(ATTRIBUTE_POOL_DECL_SIZE);				
			CASE_RETURN(METHOD_POOL_DECL_SIZE);				
			CASE_RETURN(METHOD_PARAMS_DECL_SIZE);			
			CASE_RETURN(DEPENDENCY_POOL_DECL_SIZE);				
			CASE_RETURN(METHOD_BODY_BEGIN_DECL);				
			CASE_RETURN(METHOD_BODY_END_DECL);				
			CASE_RETURN(STRING_DECL);				
			CASE_RETURN(MODIFIERS_DECL);				
			CASE_RETURN(PUSH_STRING);				
			CASE_RETURN(PUSH_INTEGER);				
			CASE_RETURN(PUSH_FLOAT);				
			CASE_RETURN(PUSH_OBJECT);				
			CASE_RETURN(PUSH_THIS);				
			CASE_RETURN(PUSH_NULL);				
			CASE_RETURN(PUSH_TRUE);				
			CASE_RETURN(PUSH_FALSE);				
			CASE_RETURN(POP_TO_RETURN);			
			CASE_RETURN(ALLOC_VAR);				
			CASE_RETURN(ALLOC_CONST_VAR);				
			CASE_RETURN(NEGATION_OP);
			CASE_RETURN(NEGATIVE_OP);				
			CASE_RETURN(POSITIVE_OP);				
			CASE_RETURN(SUM_OP);				
			CASE_RETURN(SUB_OP);				
			CASE_RETURN(MULT_OP);				
			CASE_RETURN(DIV_OP);				
			CASE_RETURN(MOD_OP);
			CASE_RETURN(POWER_OP);				
			CASE_RETURN(ASSIGN_OP);	
			CASE_RETURN(GET_MEMBER);				
			CASE_RETURN(SET_ALU_INCR);			
			CASE_RETURN(CMP_EQ);
			CASE_RETURN(CMP_NEQ);
			CASE_RETURN(CMP_L);
			CASE_RETURN(CMP_G);
			CASE_RETURN(CMP_LE);
			CASE_RETURN(CMP_GE);
			CASE_RETURN(CMP_AND);
			CASE_RETURN(CMP_OR);
			CASE_RETURN(GET_INDEX);
			CASE_RETURN(CALL_FUNCTION);
			CASE_RETURN(SET_LABEL);
			CASE_RETURN(JUMP);
			CASE_RETURN(JUMP_IF_TRUE);
			CASE_RETURN(JUMP_IF_FALSE);
			CASE_RETURN(POP_STACK_TOP);
			CASE_RETURN(RETURN);
			CASE_RETURN(PUSH_CATCH);
			CASE_RETURN(POP_CATCH);
			default:
				return "[[ unresolved symbol ]]";
			}
		}
	}
}