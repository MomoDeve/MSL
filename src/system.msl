
namespace System {
    public static class Reflection {
        private static var dll;

        public static function Reflection() {
            dll = "msl_system.dll";
            Dll.LoadLibrary(dll);
        }

        public static function GetType(object) {
            return Dll.Call(dll, "ReflectionGetType", object);
        }

        public static function CreateInstance(type, args) {
            return Dll.Call(dll, "ReflectionCreateInstance", type, args);
        }

        public static function Invoke(object, method, args) {
            return Dll.Call(dll, "ReflectionInvoke", object, method, args);
        }

        public static function ContainsMethod(object, method, argCount) {
            return Dll.Call(dll, "ReflectionContainsMethod", object, method, argCount);
        }

        public static function GetNamespace(name) {
            return Dll.Call(dll, "ReflectionGetNamespace", name);
        }

        public static function GetMember(parent, child) {
            return Dll.Call(dll, "ReflectionGetMember", parent, child);
        }

        public static function IsNamespaceExists(name) {
            return Dll.Call(dll, "ReflectionIsNamespaceExists", name);
        }

        public static function ContainsMember(object, member) {
            return Dll.Call(dll, "ReflectionContainsMember", object, member);
        }
    }

    public static class GC {
        private static var dll;

        public static function GC() {
            dll = "msl_system.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Collect() {
            return Dll.Call(dll, "GCCollect");
        }

        public static function Disable() {
            return Dll.Call(dll, "GCDisable");
        }

        public static function Enable() {
            return Dll.Call(dll, "GCEnable");
        }

        public static function ReleaseMemory() {
            return Dll.Call(dll, "GCReleaseMemory");
        }

        public static function SetMinimalMemory(value) {
            return Dll.Call(dll, "GCSetMinimalMemory", value);
        }

        public static function SetMaximalMemory(value) {
            return Dll.Call(dll, "GCSetMaximalMemory", value);
        }

        public static function SetLogPermissions(value) {
            return Dll.Call(dll, "GCSetLogPermissions", value);
        }
    }

    public static class Console {
        private static var dll;

        public static function Console() {
            dll = "msl_system.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Print(object) {
            if (Reflection.ContainsMethod(object, "ToString", 0))
                object = object.ToString();
            return Dll.Call(dll, "ConsolePrint", object);
        }

        public static function PrintLine(object) {
            if (Reflection.ContainsMethod(object, "ToString", 0))
                object = object.ToString();
            return Dll.Call(dll, "ConsolePrintLine", object);
        }

        public static function Read() {
            return Dll.Call(dll, "ConsoleRead");
        }

        public static function ReadLine() {
            return Dll.Call(dll, "ConsoleReadLine");
        }

        public static function ReadBool() {
            return Dll.Call(dll, "ConsoleReadBool");
        }

        public static function ReadFloat() {
            return Dll.Call(dll, "ConsoleReadFloat");
        }

        public static function ReadInt() {
            return Dll.Call(dll, "ConsoleReadInt");
        }
    }

    public class Array {
        private static var dll;
        private var array;

        public static function Array() {
            dll = "msl_system.dll";
            Dll.LoadLibrary(dll);
        }

        public function Array() {
            return Array(0);
        }

        public function Array(size) {
            return Dll.Call(dll, "ArrayConstructor", size);
        }

        public function Append(object) {
            Dll.Call(dll, "ArrayAppend", array, object);
            return this;
        }

        public function GetByIndex(index) {
            return Dll.Call(dll, "ArrayGetByIndex", array, index);
        }

        public function GetByIter(iterator) {
            return GetByIndex(iterator);
        }

        public function Next(iterator) {
            return iterator + 1;
        }

        public function Pop() {
            return Dll.Call(dll, "ArrayPop", array);
        }

        public function Empty() {
            return Size() == 0;
        }

        public function Size() {
            return Dll.Call(dll, "ArraySize", array);
        }

        public function ToString() {
            return Dll.Call(dll, "ArrayToString", array);
        }

        public function Begin() {
            return 0;
        }

        public function End() {
            return Size();
        }

        public function Back() {
            return GetByIndex(Size() - 1);
        }

        public function Front() {
            return GetByIndex(0);
        }

        public function Cloned() {
            var size = Size();
            var result = Array(size);
            for (var i = 0; i < size; i += 1) {
                result[i] = array[i];
            }
            return result;
        }

        public function Merged(array) {
            var result = Cloned();
            var size = Size();
            for (var i = 0; i < size; i += 1) {
                result.Append(array[i]);
            }
            return result;
        }

        public function Reversed() {
            var size = Size();
            var result = Array(size);
            for (var i = 0; i < size; i += 1) {
                result[i] = this[size - i - 1];
            }
            return result;
        }

        public function Sort() {
            Dll.Call(dll, "ArraySort", array);
            return this;
        }
    }

    public static class Math {
        private static var dll;

        public static function Math() {
            dll = "msl_system.dll";
            Dll.LoadLibrary(dll);
        }

        public static function Sqrt(value) {
            return Dll.Call(dll, "MathSqrt", value);
        }

        public static function Abs(value) {
            return Dll.Call(dll, "MathAbs", value);
        }

        public static function Sin(value) {
            return Dll.Call(dll, "MathSin", value);
        }

        public static function Cos(value) {
            return Dll.Call(dll, "MathCos", value);
        }

        public static function Tan(value) {
            return Dll.Call(dll, "MathTan", value);
        }

        public static function Exp(value) {
            return Dll.Call(dll, "MathExp", value);
        }

        public static function Asin(value) {
            return Dll.Call(dll, "MathAsin", value);
        }

        public static function Acos(value) {
            return Dll.Call(dll, "MathAcos", value);
        }

        public static function Atan(value) {
            return Dll.Call(dll, "MathAtan", value);
        }

        public static function Log10(value) {
            return Dll.Call(dll, "MathLog10", value);
        }

        public static function Log2(value) {
            return Dll.Call(dll, "MathLog2", value);
        }

        public static function Log(value) {
            return Dll.Call(dll, "MathLog", value);
        }
    }
}