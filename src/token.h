#pragma once

#include "stringExtensions.h"

namespace MSL
{
	namespace compiler
	{
		/*
		Token is a pair of type and value, which is generated by lexer from source code of MSL program
		is used by parser and code generator to generate bytecode
		*/
		struct Token
		{
			// uint32:				 0000 0000 0000 0000 0000 0000 0000 0000 -> 0x00000000
			// operand priority:	 0000 000X XXXX 0000 0000 0000 0000 0000 -> 0x0XX00000
			// bracket				 0000 0100 0000 0000 0000 0000 0000 0000 -> 0x04000000
			// value type:			 0000 1000 0000 0000 0000 0000 0000 0000 -> 0x08000000
			// unit declaration:	 0001 0000 0000 0000 0000 0000 0000 0000 -> 0x10000000
			// modifier:			 0010 0000 0000 0000 0000 0000 0000 0000 -> 0x20000000
			// unary operand:		 0100 0000 0000 0000 0000 0000 0000 0000 -> 0x40000000
			// binary operand:		 1000 0000 0000 0000 0000 0000 0000 0000 -> 0x80000000

			/*
			enums of all token types and masks to simplify their parsing
			*/

			enum Type : int32_t
			{
                ENDOFFILE = 0,
				ERROR = 258,
				ENDLINE,
				APOS,
				COMMA,
				SEMICOLON,
				FOR,
				IF,
				ELSE,
				ELIF,
				WHILE,
				VARIABLE,
				FUNCTION,
				NAMESPACE,
				LAMBDA,
				FOREACH,
				IN,
				USING,
				TRY,
				CATCH,
				OBJECT,
				THIS,
				INTEGER_CONSTANT,
				FLOAT_CONSTANT,
				STRING_CONSTANT,
				TRUE_CONSTANT,
				FALSE_CONSTANT,
				NULLPTR,
				ROUND_BRACKET_O,
				ROUND_BRACKET_C,
				SQUARE_BRACKET_O,
				SQUARE_BRACKET_C,
				BRACE_BRACKET_O,
				BRACE_BRACKET_C,
				NEGATION_OP,
				NEGATIVE_OP,
				POSITIVE_OP,
				RETURN,
				DOT,              
				ASSIGN_OP,         
				SUM_ASSIGN_OP,    
				SUB_ASSIGN_OP,     
				MULT_ASSIGN_OP,    
				DIV_ASSIGN_OP,     
				MOD_ASSIGN_OP,  
                POWER_ASSIGN_OP,
				LOGIC_EQUALS,     
				LOGIC_NOT_EQUALS,  
				LOGIC_LESS,      
				LOGIC_GREATER,  
				LOGIC_LESS_EQUALS,
				LOGIC_GREATER_EQUALS,
				LOGIC_OR,          
				LOGIC_AND,         
				SUM_OP,            
				SUB_OP,            
				MULT_OP,           
				DIV_OP,            
				MOD_OP,           
				POWER_OP,         
				CONST,
				PUBLIC,
				PRIVATE,
				STATIC,
				CLASS,
                // DEPRECATED
                VALUE_TYPE,
                MODIFIER,
                UNARY_OPERAND,
                PRIORITY,
                BINARY_OPERAND,
			};
			/*
			type of token as 32-bit integer
			*/
			Type type;
			/*
			underlying value of token (object name / constant)
			*/
			std::string value;

			/*
			creates token using its type and string value
			*/
			Token(Type type, const std::string& value);

            /*
            creates token using its type only (value will be empty)
            */
            Token(Type type);

			/*
			returns string representation of token type in format "TYPE::TOKEN_TYPE"
			*/
			static std::string ToString(Type type);

			/*
			returns string representation of token (its type and value as pair)
			*/
			std::string ToString() const;
		};

		/*
		performs linear search in array of tokens for a specific one. Return true if match was found, false either
		*/
		bool find(const std::vector<Token::Type>& vector, Token::Type type);
	}
}