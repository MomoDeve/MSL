#pragma once

#include "stringExtensions.h"

struct Token
{
	// uint32:				 0000 0000 0000 0000 0000 0000 0000 0000 -> 0x00000000
	// operand priority:	 0000 000X XXXX 0000 0000 0000 0000 0000 -> 0x0XX00000
	// one-opcode operand:   0000 0010 0000 0000 0000 0000 0000 0000 -> 0x02000000
	// bracket				 0000 0100 0000 0000 0000 0000 0000 0000 -> 0x04000000
	// value type:			 0000 1000 0000 0000 0000 0000 0000 0000 -> 0x08000000
	// unit declaration:	 0001 0000 0000 0000 0000 0000 0000 0000 -> 0x10000000
	// modifier:			 0010 0000 0000 0000 0000 0000 0000 0000 -> 0x20000000
	// unary operand:		 0100 0000 0000 0000 0000 0000 0000 0000 -> 0x40000000
	// binary operand:		 1000 0000 0000 0000 0000 0000 0000 0000 -> 0x80000000
	enum Type : uint32_t
	{
		BRACKET = 0x04000000,
		VALUE_TYPE = 0x08000000,
		UNIT_DECLARATION = 0x10000000,
		MODIFIER = 0x20000000,
		UNARY_OPERAND = 0x40000000,
		BINARY_OPERAND = 0x80000000,
		PRIORITY = 0x01F00000,
		LOWEST_PRIORITY = 0x00000000,
		HIGHEST_PRIORITY = 0x01F00000,
		ONE_OPCODE_OPERAND = 0x02000000,

		ERROR = 0x00000000,
		ENDLINE,
		APOS,
		COMMA,
		SEMICOLON,
		FOR,
		IF,
		ELSE,
		ELIF,
		WHILE,
		VARIABLE,
		FUNCTION,
		NAMESPACE,
		LAMBDA,
		FOREACH,
		IN,

		OBJECT = VALUE_TYPE + 1,
		THIS,
		INTEGER_CONSTANT,
		FLOAT_CONSTANT,
		STRING_CONSTANT,
		TRUE_CONSTANT,
		FALSE_CONSTANT,
		NULLPTR,

		ROUND_BRACKET_O = BRACKET + 1,
		ROUND_BRACKET_C,
		SQUARE_BRACKET_O,
		SQUARE_BRACKET_C,
		BRACE_BRACKET_O,
		BRACE_BRACKET_C,

		NEGATION_OP = UNARY_OPERAND,
		NEGATIVE_OP,
		POSITIVE_OP,
		NEW,
		RETURN,

		DOT = BINARY_OPERAND + 1 | 0x00F00000,
		ASSIGN_OP = BINARY_OPERAND + 2,
		SUM_ASSIGN_OP = BINARY_OPERAND + 3,
		SUB_ASSIGN_OP = BINARY_OPERAND + 4,
		MULT_ASSIGN_OP = BINARY_OPERAND + 5,
		DIV_ASSIGN_OP = BINARY_OPERAND + 6,
		MOD_ASSIGN_OP = BINARY_OPERAND + 7,
		LOGIC_EQUALS = (BINARY_OPERAND + 8) | 0x00100000,
		LOGIC_NOT_EQUALS = (BINARY_OPERAND + 9) | 0x00100000,
		LOGIC_LESS = (BINARY_OPERAND + 10) | 0x00100000,
		LOGIC_GREATER = (BINARY_OPERAND + 11) | 0x00100000,
		LOGIC_LESS_EQUALS = (BINARY_OPERAND + 12) | 0x00100000,
		LOGIC_GREATER_EQUALS = (BINARY_OPERAND + 13) | 0x00100000,
		LOGIC_OR = (BINARY_OPERAND + 14) | 0x00200000,
		LOGIC_AND = (BINARY_OPERAND + 15) | 0x00300000,
		SUM_OP = (BINARY_OPERAND + 16) | 0x00400000,
		SUB_OP = (BINARY_OPERAND + 17) | 0x00400000,
		MULT_OP = (BINARY_OPERAND + 18) | 0x00500000,
		DIV_OP = (BINARY_OPERAND + 19) | 0x00500000,
		MOD_OP = (BINARY_OPERAND + 20) | 0x00500000,
		POWER_OP = (BINARY_OPERAND + 21) | 0x00600000,

		CONST = MODIFIER + 1,
		PUBLIC,
		PRIVATE,
		INTERNAL,
		ABSTRACT,
		STATIC,

		CLASS = UNIT_DECLARATION + 1,
		INTERFACE,
	};

	Type type;
	std::string value;

	Token(Type type, const std::string& value);

	static Type GetType(const std::string& value);
	static std::string ToString(Type type);

	std::string ToString() const;
};

bool find(const std::vector<Token::Type>& vector, Token::Type type);
